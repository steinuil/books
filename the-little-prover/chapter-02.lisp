(include-book "j-bob-lang" :dir :teachpacks)
(include-book "j-bob" :dir :teachpacks)
(include-book "little-prover" :dir :teachpacks)

;; 11
(J-Bob/step (prelude)
  '(if (if (equal a 't)
           (if (equal 'nil 'nil) a b)
           (equal 'or (cons 'black '(coffee))))
       c c)
  '(((Q E 2) (cons 'black '(coffee)))
    ((Q E)   (equal 'or '(black coffee)))
    ((Q A Q) (equal-same 'nil))
    ((Q A)   (if-true a b))
    ((Q A)   (equal-if a 't))))

;; 33
(J-Bob/step (prelude)
  '(if (atom (car a))
       (if (equal (car a) (cdr a)) 'hominy 'grits)
       (if (equal (cdr (car a)) '(hash browns))
           (cons 'ketchup (car a))
           (cons 'mustard (car a))))
  '(((E A 2)   (cons/car+cdr (car a)))
    ((E A 2 2) (equal-if (cdr (car a)) '(hash browns)))))

;; 66
(J-Bob/step (prelude)
  '(cons 'statement
         (cons (if (equal a 'question)
                   (cons n '(answer))
                   (cons n '(else)))
               (if (equal a 'question)
                   (cons n '(other answer))
                   (cons n '(other else)))))
  '(((2)
     (if-same (equal a 'question)
              (cons
               (if (equal a 'question)
                   (cons n '(answer))
                   (cons n '(else)))
               (if (equal a 'question)
                   (cons n '(other answer))
                   (cons n '(other else))))))
    ((2 A 1) (if-nest-A (equal a 'question)
                        (cons n '(answer))
                        (cons n '(else))))
    ((2 A 2) (if-nest-A (equal a 'question)
                        (cons n '(other answer))
                        (cons n '(other else))))
    ((2 E 1) (if-nest-E (equal a 'question)
                        (cons n '(answer))
                        (cons n '(else))))
    ((2 E 2) (if-nest-E (equal a 'question)
                        (cons n '(other answer))
                        (cons n '(other else))))))
